<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="recycling.manager.dao.face.SlsDao">
	
	<!-- 체험단 기본 조회구조  -->
	<sql id="expBoard">
	SELECT 
    	exp_code
	    , s_code
	    , exp_name
	    , exp_price
	    , exp_detail
	    , exp_hit
	    , exp_date
	FROM exp
	</sql>
	
	<!-- exp Join expSch  -->
	<sql id="expAndExpSch">
	SELECT e.exp_code, e.s_code, e.exp_name, e.exp_price, e.exp_detail, e.exp_hit, e.exp_date,
       s.sch_no, s.sch_date, s.sch_time, s.sch_cnt
	FROM exp e
	JOIN exp_sch s ON e.exp_code = s.exp_code
	</sql>
	
	<!-- 판매자 정보 상세 조회(개인) -->
	<select id="selectPriSeller" parameterType="string" resultType="hashmap">
		SELECT 
		    S.s_code s_code, S.acc_name acc_name, S.acc_bank acc_bank, S.s_entdate s_entdate, S.s_chk s_chk,
		    B.b_code b_code, B.b_id b_id, B.b_ct_code ct_code, B.b_name b_name, B.b_phone b_phone, B.b_email b_email, B.b_entdate b_entdate,
		    B.adr_postcode adr_postcode, B.adr_addr adr_addr, B.adr_detail adr_detail
		FROM seller S, (
		    SELECT 
		        B.b_code, B.b_ct_code, B.b_id, B.b_name, B.b_phone, B.b_email, B.b_entdate, B.b_out,
		        ADR.adr_postcode, ADR.adr_addr, ADR.adr_detail 
		    FROM buyer B, buyer_adr ADR
		    <where>
		    	AND B.b_code = ADR.b_code(+)
		        AND ADR.adr_chk = 'Y'
		    </where> 
		) B
		<where>
			AND S.b_code = B.b_code(+)
		    AND B.b_out = 'N'
		    AND B.b_code = #{bCode } 
		</where> 
	</select>
	
	<!-- 판매자 정보 상세 조회(기업) -->
	<select id="selectCmpSeller" parameterType="string" resultType="hashmap">
		SELECT 
		    S.s_code s_code, S.acc_name acc_name, S.acc_bank acc_bank, S.s_entdate s_entdate, S.s_chk s_chk,
		    B.b_code b_code, B.b_id b_id, B.b_ct_code ct_code, B.b_name b_name, B.b_phone b_phone, B.b_email b_email, B.b_entdate b_entdate,
		    B.adr_postcode adr_postcode, B.adr_addr adr_addr, B.adr_detail adr_detail,
		    B.cmp_ceo cmp_ceo, B.cmp_name cmp_name, B.cmp_num cmp_num, B.cmp_postcode cmp_postcode, B.cmp_addr cmp_addr, B.cmp_detail cmp_detail
		FROM seller S, (
		    SELECT 
		        B.b_code, B.b_ct_code, B.b_id, B.b_name, B.b_phone, B.b_email, B.b_entdate, B.b_out,
		        B.adr_postcode, B.adr_addr, B.adr_detail,
		        C.cmp_ceo, C.cmp_name, C.cmp_num, C.cmp_postcode, C.cmp_addr, C.cmp_detail
		    FROM cmp C, (
		        SELECT 
		            B.b_code, B.b_ct_code, B.b_id, B.b_name, B.b_phone, B.b_email, B.b_entdate, B.b_out,
		            ADR.adr_postcode, ADR.adr_addr, ADR.adr_detail 
		        FROM buyer B, buyer_adr ADR
		        <where>
			        AND B.b_code = ADR.b_code(+)
		            AND ADR.adr_chk = 'Y'
		        </where> 
		        ) B
		        <where>
		        	AND B.b_code = C.b_code(+)
		        </where>
		    ) B
		<where>
			AND S.b_code = B.b_code(+)
		    AND B.b_out = 'N'
		    AND B.b_code = #{bcode }
		</where> 
	</select>
	
	<!-- 총 신고 횟수 -->
	<select id="selectCntRpt" parameterType="string" resultType="int">
		SELECT count(*) cnt FROM (
		    SELECT P.prd_code, P.s_code 
		    FROM prd P, prd_rpt R
		    <where>
			    AND P.prd_code(+) = R.prd_code
			    AND P.s_code = #{sCode }
		    </where> 
		)
	</select>
	
	<!-- 총 거래 완료 건수 -->
	<select id="selectCntOrd" parameterType="string" resultType="int">
		SELECT count(*) cnt FROM (
		    SELECT P.prd_code, OD.orddt_code
		    FROM prd P, order_detail OD
		    <where>
		    	AND P.prd_code(+) = OD.prd_code
		    	AND OD.stt_no = 940
		        AND P.s_code = #{sCode }
		    </where> 
		)
	</select>
	
	<!-- 판매자 요청 관리 -->
	<select id="selectBysChk" resultType="Map">
		SELECT S.s_code s_code, B.b_ct_code ct_code, NVL(B.cmp_name, '-') cmp_name, B.b_name b_name, B.b_phone b_phone, B.b_email b_email
			FROM seller S, (
			    SELECT B.b_code, B.b_ct_code, B.b_name, B.b_phone, B.b_email, C.cmp_name, B.b_out FROM buyer B, cmp C
			    WHERE B.b_code = C.b_code(+)
			) B
			<where>
				AND S.b_code = B.b_code(+)
			    AND S.s_chk = 'N'
			    AND B.b_out = 'N'
			</where>
			ORDER BY S.s_entdate
	</select>
	
	<!-- 구매자 코드 조회 -->
	<select id="selectBysCode" resultType="string" parameterType="string">
		SELECT B.b_code b_code FROM buyer B, Seller S
		<where>
			AND B.b_code = S.b_code(+)
			AND S.s_code = #{sCode }
		</where> 
	</select>
	
	<!-- exp Join expSch resultMap-->
	<resultMap type="java.util.HashMap" id="expJoin">
	
	<result property="expCode" column="exp_code"/>
	<result property="sCode" column="s_code"/>
	<result property="expName" column="exp_name"/>
	<result property="expPrice" column="exp_price"/>
	<result property="expDetail" column="exp_detail"/>
	<result property="expHit" column="exp_hit"/>
	<result property="expDate" column="exp_date"/>

	<result property="schNo" column="sch_no"/>
	<result property="schDate" column="sch_date"/>
	<result property="schTime" column="sch_time"/>
	<result property="schCnt" column="sch_cnt"/>
	</resultMap>
	
	
	<!-- 체험단 조회 -->
	<select id="selectAll" resultMap="expJoin">
			<include refid="expAndExpSch"/>
	</select>
	
	<!-- 체험단 세부 조회 -->
	<select id="selectDetail" resultType="Exp" parameterType="Exp">
		<include refid="expBoard"/>
		<where>exp_code = #{expCode }</where>
	</select>
	
	<!-- 세부조회에 따른 조회수 증가 -->
	<update id="hit" parameterType="Exp">
	    UPDATE exp SET exp_hit = exp_hit + 1
    	WHERE exp_code = #{expCode }
	</update>
	
	<!-- 체험단 등록 -->
	<insert id="insert" parameterType="Exp">
	    <selectKey order="BEFORE" keyProperty="expCode" resultType="String">
	        SELECT ('EXP'||LPAD(exp_seq.nextval, 7, '0')) FROM dual
	    </selectKey>
	    INSERT INTO exp
	    ( exp_code
	    , s_code
	    , exp_name
	    , exp_price
	    , exp_detail
	    , exp_hit
	    , exp_date
	    )VALUES
	    ( #{expCode }
	    , #{sCode }
	    , #{expName }
	    , #{expPrice }
	    , #{expDetail }
	    , #{expHit }
	    , default
	    )
	</insert>

	<!-- 파일 등록 -->
	<insert id="fileup" parameterType="ExpFile">
	    <selectKey order="BEFORE" keyProperty="expFlNo" resultType="int">
	        SELECT EXP_FILE_SEQ.nextval FROM dual
	    </selectKey>
	    INSERT INTO Exp_File 
	    	(exp_flNo, exp_code
	    	, ct_pflNo ,origin_name
	     	, stored_name 
	     	)
	    VALUES
	    	(#{expFlNo}, #{expCode}
	    	, #{ctPflNo}, #{originName}
	    	, #{storedName}
	    	)
	</insert>
	
	<!-- 체험 일정 등록 -->
	<insert id="expschUp" parameterType="ExpSch">
	    <selectKey order="BEFORE" keyProperty="schNo" resultType="int">
	        SELECT EXP_SCH_SEQ.nextval FROM dual
	    </selectKey>
	    INSERT INTO Exp_Sch
	    	(sch_no, exp_code
	    	, sch_date , sch_time
	     	, sch_cnt
	     	)
	    VALUES
	    	(#{schNo}, #{expCode}
	    	, #{schDate}, #{schTime}
	    	, #{schCnt}
	    	)
	</insert>

	

	
</mapper>